#include <stdio.h>
#include <stdlib.h>
#include<time.h>
#define MaxSize 100
#define MAXK 1e4
clock_t start,stop;
double duration;
/*使用快排+冒泡排序*/
void BubbleSort(int R[],int n);
void qickSort(int R[],int low,int high);
void produce_number();
void run_bubbleSort();
void run_qickSort();
void readFromText(int *R);
void sencond_find(int R[]);
void In_sencond_find(int R[]);
int main()
{
    FILE*fp;
    int i;
    int R[MaxSize+1];
    //把数据读进R[]
    if((fp=fopen("E://数据结构//快排+冒泡//data.txt","r"))==NULL)
        {
        printf("fail to open!");
        exit(0);
    }
    for (i = 1; i <= MaxSize; i++){
        fscanf(fp,"%d ",&R[i]);
    }
    printf("------------------测试数据---------------------\n");
    for (i= 1;i<= MaxSize;i++){
            printf("%d ",R[i]);//重新赋值
          }
    printf("\n");
    printf("------------------测试结果---------------------\n");
    run_bubbleSort();//冒泡排序性能测试
    run_qickSort();//快排序性能测试
    sencond_find(R);
    In_sencond_find(R);
    return 0;
}
/*冒泡排序
传入参数：数组+元素个数*/
void BubbleSort(int R[],int n){
    int i,j,flag,temp;
    for(i=n;i>=2;i--){//记录的是要比较的次数
        flag =0;
        for(j=2;j<=i;j++){
            if(R[j-1]>R[j]){
                temp=R[j];
                R[j]=R[j-1];
                R[j-1]=temp;
                flag=1;
            }
        }
    if(flag==0)//一趟排序结束，如果没有交换，则证明有序，直接返回
        break;
    }
}

/*快速排序*/
void qickSort(int R[],int low,int high){
    int i=low;
    int j=high;//记录位置
    int temp;//盛放比较元素的值
    if(low<high){
        temp=R[low];
        while(i!=j){
            while(R[j]>temp && j>i) j--;
            if(i<j){
            R[i]=R[j];
            i++;//交换过来的j在i的旁边,i+1
            }
            while(R[i]<temp && i<j) i++;
            if(i<j){
            R[j]=R[i];
            j--;
            }
        }
        R[i]=temp;
        qickSort(R,low,i-1);
        qickSort(R,i+1,high);
    }
}

/*随机数产生算法
功能：把生成随机数写进文件*/
void produce_number(){
    int R[MaxSize];
    int i;
    int N=30;
    FILE*fp;
    if((fp=fopen("E://数据结构//快排+冒泡//data.txt","w"))==NULL)
    {
        printf("fail to open!");
        exit(0);
    }
    srand((unsigned int)time(NULL));
    for (i = 0; i < MaxSize; i++)
    {
        R[i] = rand()%N;
        //printf("%d ", R[i]);
        //写进文档
        fprintf(fp,"%d ",R[i]);
    }
}

/*产生样本数组R
功能：从文件中读取数组信息*/
void readFromText(int *R){
    FILE*fp;
    int i;
    if((fp=fopen("E://数据结构//快排+冒泡//data.txt","r"))==NULL)
    {
        printf("fail to open!");
        exit(0);
    }
    for (i = 0; i < MaxSize; i++)
    {
        fscanf(fp,"%d ",&R[i]);
    }
}

/*冒泡排序的性能测试*/
void run_bubbleSort(){
    FILE*fp;
    int i,j;
    int n=MaxSize;
    int R[MaxSize+1],A[MaxSize+1];
    if((fp=fopen("E://数据结构//快排+冒泡//data.txt","r"))==NULL)
        {
        printf("fail to open!");
        exit(0);
    }
    for (j = 1; j <= MaxSize; j++){
            fscanf(fp,"%d ",&A[j]);
    }
    start=clock();//不好的地方，把读取文件的时间也算进去了
    for(i=0;i<MAXK;i++){
        //每次都要重新读
         for (j = 1; j <= MaxSize; j++){
            R[j]=A[j];//重新赋值
          }

          /*printf("--------------------------\n");
          for (j = 1; j <= MaxSize; j++){
            printf("%d ",R[j]);//重新赋值
          }
        printf("\n");*/
         BubbleSort(R,n);
         /*printf("--------------------------\n");
         for (j = 1; j <= MaxSize; j++){
            printf("%d ",R[j]);//重新赋值
        }
        printf("\n");*/
    }
    stop=clock();
    duration=((double)(stop-start))/CLK_TCK;
    printf("冒泡排序：ticks=%f\n",(double)(stop-start));
    printf("冒泡排序：duration=%6.2e\n",duration);
}
/*快排序的性能测试*/
void run_qickSort(){
    FILE*fp;
    int i,j;
    int high=MaxSize,low=1;
    int R[MaxSize+1],A[MaxSize+1];
    if((fp=fopen("E://数据结构//快排+冒泡//data.txt","r"))==NULL)
        {
        printf("fail to open!");
        exit(0);
    }
    for (j = 1; j <= MaxSize; j++){
            fscanf(fp,"%d ",&A[j]);
    }
    start=clock();//不好的地方，把读取文件的时间也算进去了
    for(i=0;i<MAXK;i++){
        //每次都要重新读
         for (j = 1; j <= MaxSize; j++){
            R[j]=A[j];//重新赋值
          }
         qickSort(R,low,high);
    }
    stop=clock();
    duration=((double)(stop-start))/CLK_TCK;
    printf("快排序ticks=%f\n",(double)(stop-start));
    printf("快排序duration=%6.2e\n",duration);
}

//二分查找，递归
void sencond_find(int R[]){

}

//二分查找,非递归
/*void In_sencond_find(int R[]){
    int mid;
    while(low<=high){

    }
}*/
